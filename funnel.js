
import { requireAuth, attachLogout, getJSON, setJSON, escapeHtml, uid, daysSince } from './core.js';
const s=requireAuth(); attachLogout();
const storageKey='club_portal_funnel_v4'; const tiles=document.getElementById('metricTiles'); const listBody=document.querySelector('#listTable tbody');
const fType=document.getElementById('fType'), fStage=document.getElementById('fStage'), fClub=document.getElementById('fClub'), fBegeleid=document.getElementById('fBegeleid'), fStartFrom=document.getElementById('fStartFrom'), fStartTo=document.getElementById('fStartTo');
function getData(){return getJSON(storageKey,[])} function setData(v){setJSON(storageKey,v)}
function withinDateRange(d){ if(!d) return true; const x=new Date(d).getTime(); const a=fStartFrom.value?new Date(fStartFrom.value).getTime():-Infinity; const b=fStartTo.value?new Date(fStartTo.value).getTime():Infinity; return x>=a&&x<=b; }
function filtered(items){ return items.filter(it=>(!fType.value||it.typeTraject===fType.value)&&(!fStage.value||it.stage===fStage.value)&&(!fClub.value||String(it.clubondersteuner||'').toLowerCase().includes(fClub.value.toLowerCase()))&&(!fBegeleid.value||String(it.trajectbegeleider||'').toLowerCase().includes(fBegeleid.value.toLowerCase()))&&withinDateRange(it.startDate)); }
function durationDays(s,e){ if(!s||!e) return null; const S=new Date(s).getTime(), E=new Date(e).getTime(); if(isNaN(S)||isNaN(E)) return null; return Math.max(0,Math.round((E-S)/(1000*60*60*24))); }
function fmtMoney(n){ const x=Number(n||0); return x.toLocaleString('nl-NL',{style:'currency',currency:'EUR'}); }
function num(n){return Number(n||0)}
function derive(r){ const budget=num(r.costBudget); const subPct=Math.min(100,Math.max(0,num(r.financingPct))); const ownPct=Math.min(100,Math.max(0,num(r.ownPct))); const subAmt=Math.round(budget*subPct)/100; const ownAmt=Math.round(budget*ownPct)/100; const coveredPct=Math.min(100,subPct+ownPct); const coveredAmt=Math.min(budget,subAmt+ownAmt); const residualAmt=Math.max(0,budget-coveredAmt); return {budget,subPct,ownPct,subAmt,ownAmt,coveredPct,residualAmt}; }
function metrics(rows){ const total=rows.length; const durs=rows.map(r=>durationDays(r.startDate,r.endDateExpected)).filter(v=>typeof v==='number'); const avg=durs.length?Math.round(durs.reduce((a,b)=>a+b,0)/durs.length):0; const median=durs.length?durs.sort((a,b)=>a-b)[Math.floor(durs.length/2)]:0; let budgetSum=0, ownSum=0, subSum=0, residSum=0, subLocal=0, subOther=0; const byType=['CKC','Rabo Clubsupport','Verenigingsmanager','Verduurzaming'].map(t=>({type:t,count:rows.filter(r=>r.typeTraject===t).length})); for(const r of rows){const d=derive(r); budgetSum+=d.budget; ownSum+=d.ownAmt; subSum+=d.subAmt; residSum+=d.residualAmt; if((r.financingType||'').toLowerCase().includes('lokaal')) subLocal+=d.subAmt; else if((r.financingType||'').toLowerCase().includes('overige')) subOther+=d.subAmt;} return {total,avg,median,budgetSum,ownSum,subSum,residSum,subLocal,subOther,byType}; }
function renderMetrics(rows){ const m=metrics(rows); tiles.innerHTML=''; const card=(t,v,s=null,i='📊')=>{const d=document.createElement('div'); d.className='tile'; d.style.alignItems='flex-start'; d.innerHTML=`<div class="icon">${i}</div><div><h3>${escapeHtml(t)}</h3><p><strong>${escapeHtml(String(v))}</strong>${s?`<br><span class="small">${escapeHtml(s)}</span>`:''}</p></div>`; return d; }; tiles.appendChild(card('Totaal trajecten (filter)',m.total)); tiles.appendChild(card('Begroot totaal',fmtMoney(m.budgetSum),'','💶')); tiles.appendChild(card('Subsidie totaal',fmtMoney(m.subSum),`LSA: ${fmtMoney(m.subLocal)} • Overige: ${fmtMoney(m.subOther)}`,'🏛️')); tiles.appendChild(card('Eigen bijdrage totaal',fmtMoney(m.ownSum),'','👥')); tiles.appendChild(card('Restant (onbekend/overig)',fmtMoney(m.residSum),'','❓')); tiles.appendChild(card('Gemiddelde duur (dagen, gepland)',m.avg,`Mediaan: ${m.median}`,'⏱️')); m.byType.forEach(x=>tiles.appendChild(card(`${x.type}`,x.count,null,'🧩'))); }
function renderList(rows){ listBody.innerHTML=''; rows.forEach(r=>{const d=derive(r); const dur=durationDays(r.startDate,r.endDateExpected); const tr=document.createElement('tr'); tr.innerHTML=`<td>${escapeHtml(r.vereniging||'')}</td><td>${escapeHtml(r.typeTraject||'')}</td><td>${escapeHtml(r.stage||'')}</td><td>${escapeHtml(r.clubondersteuner||'')}</td><td>${escapeHtml(r.trajectbegeleider||'')}</td><td>${r.startDate?new Date(r.startDate).toLocaleDateString():'—'}</td><td>${r.endDateExpected?new Date(r.endDateExpected).toLocaleDateString():'—'}</td><td>${dur??'—'}</td><td>${fmtMoney(r.costBudget)}</td><td>${escapeHtml(r.financingType||'')}</td><td>${(d.subPct||0).toFixed(1)}%</td><td>${fmtMoney(d.subAmt)}</td><td>${(d.ownPct||0).toFixed(1)}%</td><td>${fmtMoney(d.ownAmt)}</td><td>${d.coveredPct.toFixed(1)}%</td><td>${fmtMoney(d.residualAmt)}</td>`; listBody.appendChild(tr); }); }
function renderBoard(){ document.querySelectorAll('.dropzone').forEach(z=>z.innerHTML=''); const rows=getData(); const alerts=[]; for(const r of rows){const d=derive(r); const start=r.startDate?new Date(r.startDate).toLocaleDateString():'—'; const end=r.endDateExpected?new Date(r.endDateExpected).toLocaleDateString():'—'; const c=document.createElement('div'); c.className='card-item'; c.draggable=true; c.dataset.id=r.id; c.innerHTML=`<div class='title'>${escapeHtml(r.vereniging||'(onbekende vereniging)')}</div><div class='small'>${escapeHtml(r.typeTraject||'')}</div><div class='badges'><span class='badge'>Start: ${start}</span><span class='badge'>Einde: ${end}</span><span class='badge'>Clubondersteuner: ${escapeHtml(r.clubondersteuner||'-')}</span><span class='badge'>Begeleider: ${escapeHtml(r.trajectbegeleider||'-')}</span>${r.financingType?`<span class='badge'>${escapeHtml(r.financingType)}: ${(d.subPct||0).toFixed(1)}%</span>`:''}${d.ownPct>0?`<span class='badge'>Eigen: ${d.ownPct.toFixed(1)}%</span>`:''}${daysSince(r.lastUpdate)>=7&&r.stage!=='afgerond'?'<span class="badge warn">⚠ >7 dagen stil</span>':''}${r.stage==='afgerond'?'<span class="badge ok">✓ klaar</span>':''}</div>`; c.addEventListener('dragstart',e=>e.dataTransfer.setData('text/plain',r.id)); c.addEventListener('click',()=>openModal(r.id)); const zone=document.querySelector(`.dropzone[data-stage='${r.stage}']`); if(zone) zone.appendChild(c); if(daysSince(r.lastUpdate)>=7&&r.stage!=='afgerond') alerts.push(r); } const alertsBox=document.getElementById('alertsBox'), alertsRows=document.getElementById('alertsRows'); if(alerts.length){alertsBox.classList.remove('hidden'); alertsRows.innerHTML=''; for(const a of alerts){const row=document.createElement('div'); row.className='row'; row.innerHTML=`<div><strong>${escapeHtml(a.vereniging)}</strong> — ${escapeHtml(a.typeTraject)} <span class='small'>(geen update sinds ${daysSince(a.lastUpdate)} dagen)</span></div><div><button class='ok' data-id='${a.id}' data-action='touch'>Markeer geüpdatet</button><button class='ghost' data-id='${a.id}' data-action='open'>Open</button></div>`; alertsRows.appendChild(row);} alertsRows.addEventListener('click',e=>{const id=e.target.dataset.id, act=e.target.dataset.action; if(!id||!act) return; const rows=getData(); const i=rows.findIndex(x=>x.id===id); if(i<0) return; if(act==='touch'){rows[i].lastUpdate=new Date().toISOString().slice(0,10); setData(rows); renderBoard(); recalc();} if(act==='open'){openModal(id);} }); } else alertsBox.classList.add('hidden'); }
function recalc(){ const rows=filtered(getData()); renderMetrics(rows); renderList(rows); }
function setupDnD(){ document.querySelectorAll('.dropzone').forEach(z=>{z.addEventListener('dragover',e=>e.preventDefault()); z.addEventListener('drop',e=>{e.preventDefault(); const id=e.dataTransfer.getData('text/plain'); const stage=z.dataset.stage; const rows=getData(); const i=rows.findIndex(x=>x.id===id); if(i<0) return; rows[i].stage=stage; setData(rows); renderBoard(); recalc();});}); }
function openModal(id=null){ const modal=document.getElementById('cardModal'); const form=document.getElementById('cardForm'); const title=document.getElementById('modalTitle'); modal.classList.add('show'); const rows=getData(); let data={id:uid(), vereniging:'', typeTraject:'', clubondersteuner:'', trajectbegeleider:'', startDate:'', endDateExpected:'', costBudget:'', financingType:'', financingPct:'', financingAmount:'', ownPct:'', ownAmount:'', stage:'intake', notes:'', lastUpdate:new Date().toISOString().slice(0,10)}; if(id){const i=rows.findIndex(x=>x.id===id); if(i>=0) data=rows[i];} for(const [k,v] of Object.entries(data)){const el=form.querySelector(`[name='${k}']`); if(el) el.value=v??'';} title.textContent=id?'Traject bewerken':'Nieuw traject'; const costBudget=form.querySelector('#costBudget'), financingPct=form.querySelector('#financingPct'), financingAmount=form.querySelector('#financingAmount'), ownPct=form.querySelector('#ownPct'), ownAmount=form.querySelector('#ownAmount'), coverageInfo=document.getElementById('coverageInfo'); function recompute(){ const budget=Number(costBudget.value||0); const subP=Math.min(100,Math.max(0,Number(financingPct.value||0))); const ownP=Math.min(100,Math.max(0,Number(ownPct.value||0))); const subAmt=Math.round(budget*subP)/100; const ownAmt=Math.round(budget*ownP)/100; financingAmount.value=subAmt.toFixed(2); ownAmount.value=ownAmt.toFixed(2); const coveredPct=Math.min(100,subP+ownP); const coveredAmt=Math.min(budget,subAmt+ownAmt); const residualPct=Math.max(0,100-coveredPct); const residualAmt=Math.max(0,budget-coveredAmt); const warn=(subP+ownP)>100?' ⚠ som % > 100':''; coverageInfo.textContent=`Dekking: ${coveredPct.toFixed(1)}% (${coveredAmt.toFixed(2)} EUR) • Restant: ${residualPct.toFixed(1)}% (${residualAmt.toFixed(2)} EUR)${warn}`; } [costBudget,financingPct,ownPct].forEach(el=>el.addEventListener('input',recompute)); recompute(); form.onsubmit=e=>{e.preventDefault(); const fd=new FormData(form); const obj=Object.fromEntries(fd.entries()); if(!obj.lastUpdate) obj.lastUpdate=new Date().toISOString().slice(0,10); const list=getData(); const i=list.findIndex(x=>x.id===obj.id); if(i>=0) list[i]=obj; else list.push(obj); setData(list); modal.classList.remove('show'); renderBoard(); recalc(); }; document.getElementById('cancelModalBtn').onclick=()=>modal.classList.remove('show'); }
document.getElementById('addCardBtn').addEventListener('click',()=>openModal(null));
document.getElementById('exportFunnelBtn').addEventListener('click',()=>{const blob=new Blob([JSON.stringify(getData(),null,2)],{type:'application/json'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=`funnel-v4-${new Date().toISOString().slice(0,10)}.json`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);});
document.getElementById('clearFunnelBtn').addEventListener('click',()=>{ if(confirm('Alles wissen?')){ setData([]); renderBoard(); recalc(); } });
document.getElementById('exportCsvBtn').addEventListener('click',()=>{ const rows=filtered(getData()); const headers=['id','vereniging','typeTraject','stage','clubondersteuner','trajectbegeleider','startDate','endDateExpected','plannedDurationDays','costBudget','financingType','financingPct','financingAmount','ownPct','ownAmount','lastUpdate','notes']; const csv=[headers.join(',')].concat(rows.map(r=>{const d=durationDays(r.startDate,r.endDateExpected); const vals={...r,plannedDurationDays:(d??'')}; return headers.map(h=>`"${String(vals[h]??'').replaceAll('"','""')}"`).join(',');})).join('\n'); const blob=new Blob([csv],{type:'text/csv;charset=utf-8;'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=`funnel-export-${new Date().toISOString().slice(0,10)}.csv`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); });
function init(){ renderBoard(); setupDnD(); [fType,fStage,fClub,fBegeleid,fStartFrom,fStartTo].forEach(el=>el.addEventListener('input',recalc)); recalc(); } init();
